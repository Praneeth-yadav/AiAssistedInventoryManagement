{"ast":null,"code":"var _jsxFileName = \"/Users/praneetheraganaboina/Desktop/Learnings/AiAssistedInventoryManagement/src/components/CustomerService.js\",\n  _s = $RefreshSig$();\nimport { Button, Input, InputGroup, InputLeftAddon, Stack, Textarea, useToast } from \"@chakra-ui/react\";\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport { Uploadimage } from \"./Uploadimage\";\nimport { useLocation } from \"react-router-dom\";\nimport { Navbar } from \"./Navbar\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const CustomerService = () => {\n  _s();\n  const [description, setDescription] = useState(\"\");\n  const [image, setImage] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [decision, setDecision] = useState(\"\");\n  const toast = useToast();\n\n  //   const navigate = useNavigate();\n  const location = useLocation();\n  const handleImageUpload = file => {\n    const reader = new FileReader();\n    reader.onloadend = () => {\n      const base64data = reader.result;\n      setImage(base64data); // Set the base64-encoded image in state\n    };\n\n    reader.readAsDataURL(file); // Convert the file to base64 format\n  };\n\n  const handleSubmit = async () => {\n    setIsLoading(true);\n    const requestData = {\n      description,\n      image // Send the base64-encoded image data to the API\n    };\n\n    try {\n      const response = await axios.post(\"http://localhost:5000/getDecision\", requestData);\n      setDecision(response.data.decision);\n      toast({\n        title: \"Success\",\n        description: \"Your request has been processed.\",\n        status: \"success\",\n        duration: 3000,\n        isClosable: true\n      });\n    } catch (error) {\n      console.error(\"Error getting decision:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to process your request.\",\n        status: \"error\",\n        duration: 3000,\n        isClosable: true\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Navbar, {\n      name: location.state.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_s(CustomerService, \"h6+gzekpBUW+53Ls6jkLav9giGc=\", false, function () {\n  return [useToast, useLocation];\n});\n_c = CustomerService;\nexport default CustomerService;\nvar _c;\n$RefreshReg$(_c, \"CustomerService\");","map":{"version":3,"names":["Button","Input","InputGroup","InputLeftAddon","Stack","Textarea","useToast","useState","axios","Uploadimage","useLocation","Navbar","jsxDEV","_jsxDEV","Fragment","_Fragment","CustomerService","_s","description","setDescription","image","setImage","isLoading","setIsLoading","decision","setDecision","toast","location","handleImageUpload","file","reader","FileReader","onloadend","base64data","result","readAsDataURL","handleSubmit","requestData","response","post","data","title","status","duration","isClosable","error","console","children","name","state","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/praneetheraganaboina/Desktop/Learnings/AiAssistedInventoryManagement/src/components/CustomerService.js"],"sourcesContent":["import {\n  Button,\n  Input,\n  InputGroup,\n  InputLeftAddon,\n  Stack,\n  Textarea,\n  useToast,\n} from \"@chakra-ui/react\";\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport { Uploadimage } from \"./Uploadimage\";\nimport { useLocation } from \"react-router-dom\";\nimport { Navbar } from \"./Navbar\";\n\nexport const CustomerService = () => {\n  const [description, setDescription] = useState(\"\");\n  const [image, setImage] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [decision, setDecision] = useState(\"\");\n  const toast = useToast();\n\n  //   const navigate = useNavigate();\n  const location = useLocation();\n\n  const handleImageUpload = (file) => {\n    const reader = new FileReader();\n    reader.onloadend = () => {\n      const base64data = reader.result;\n      setImage(base64data); // Set the base64-encoded image in state\n    };\n    reader.readAsDataURL(file); // Convert the file to base64 format\n  };\n\n  const handleSubmit = async () => {\n    setIsLoading(true);\n    const requestData = {\n      description,\n      image, // Send the base64-encoded image data to the API\n    };\n\n    try {\n      const response = await axios.post(\n        \"http://localhost:5000/getDecision\",\n        requestData\n      );\n      setDecision(response.data.decision);\n      toast({\n        title: \"Success\",\n        description: \"Your request has been processed.\",\n        status: \"success\",\n        duration: 3000,\n        isClosable: true,\n      });\n    } catch (error) {\n      console.error(\"Error getting decision:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to process your request.\",\n        status: \"error\",\n        duration: 3000,\n        isClosable: true,\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <>\n      <Navbar name={location.state.name} />\n      {/* <Stack spacing={4} maxWidth=\"500px\" margin=\"auto\" padding=\"20px\">\n        <InputGroup>\n          <InputLeftAddon children=\"Description\" />\n          <Textarea\n            placeholder=\"Describe your issue here\"\n            value={description}\n            onChange={(e) => setDescription(e.target.value)}\n          />\n        </InputGroup>\n\n        <Uploadimage onImageUpload={handleImageUpload} />\n\n        <Button colorScheme=\"blue\" onClick={handleSubmit} isLoading={isLoading}>\n          Submit\n        </Button>\n\n        {decision && (\n          <div style={{ marginTop: \"20px\" }}>\n            <h3>Decision:</h3>\n            <p>{decision}</p>\n          </div>\n        )}\n      </Stack> */}\n    </>\n  );\n};\n\nexport default CustomerService;\n"],"mappings":";;AAAA,SACEA,MAAM,EACNC,KAAK,EACLC,UAAU,EACVC,cAAc,EACdC,KAAK,EACLC,QAAQ,EACRC,QAAQ,QACH,kBAAkB;AACzB,SAASC,QAAQ,QAAQ,OAAO;AAChC,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,WAAW,QAAQ,eAAe;AAC3C,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,MAAM,QAAQ,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAElC,OAAO,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACnC,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACa,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACe,SAAS,EAAEC,YAAY,CAAC,GAAGhB,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACiB,QAAQ,EAAEC,WAAW,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAMmB,KAAK,GAAGpB,QAAQ,CAAC,CAAC;;EAExB;EACA,MAAMqB,QAAQ,GAAGjB,WAAW,CAAC,CAAC;EAE9B,MAAMkB,iBAAiB,GAAIC,IAAI,IAAK;IAClC,MAAMC,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC;IAC/BD,MAAM,CAACE,SAAS,GAAG,MAAM;MACvB,MAAMC,UAAU,GAAGH,MAAM,CAACI,MAAM;MAChCb,QAAQ,CAACY,UAAU,CAAC,CAAC,CAAC;IACxB,CAAC;;IACDH,MAAM,CAACK,aAAa,CAACN,IAAI,CAAC,CAAC,CAAC;EAC9B,CAAC;;EAED,MAAMO,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC/Bb,YAAY,CAAC,IAAI,CAAC;IAClB,MAAMc,WAAW,GAAG;MAClBnB,WAAW;MACXE,KAAK,CAAE;IACT,CAAC;;IAED,IAAI;MACF,MAAMkB,QAAQ,GAAG,MAAM9B,KAAK,CAAC+B,IAAI,CAC/B,mCAAmC,EACnCF,WACF,CAAC;MACDZ,WAAW,CAACa,QAAQ,CAACE,IAAI,CAAChB,QAAQ,CAAC;MACnCE,KAAK,CAAC;QACJe,KAAK,EAAE,SAAS;QAChBvB,WAAW,EAAE,kCAAkC;QAC/CwB,MAAM,EAAE,SAAS;QACjBC,QAAQ,EAAE,IAAI;QACdC,UAAU,EAAE;MACd,CAAC,CAAC;IACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MAC/CnB,KAAK,CAAC;QACJe,KAAK,EAAE,OAAO;QACdvB,WAAW,EAAE,iCAAiC;QAC9CwB,MAAM,EAAE,OAAO;QACfC,QAAQ,EAAE,IAAI;QACdC,UAAU,EAAE;MACd,CAAC,CAAC;IACJ,CAAC,SAAS;MACRrB,YAAY,CAAC,KAAK,CAAC;IACrB;EACF,CAAC;EAED,oBACEV,OAAA,CAAAE,SAAA;IAAAgC,QAAA,eACElC,OAAA,CAACF,MAAM;MAACqC,IAAI,EAAErB,QAAQ,CAACsB,KAAK,CAACD;IAAK;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC,gBAwBrC,CAAC;AAEP,CAAC;AAACpC,EAAA,CAjFWD,eAAe;EAAA,QAKZV,QAAQ,EAGLI,WAAW;AAAA;AAAA4C,EAAA,GARjBtC,eAAe;AAmF5B,eAAeA,eAAe;AAAC,IAAAsC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}